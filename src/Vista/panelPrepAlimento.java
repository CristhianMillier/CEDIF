package Vista;

import Datos.Detalle_Preparacion;
import Datos.Modelo_Tabla_PreparacionAlimento;
import Datos.Personal;
import Datos.PreparacionAlimento;
import Datos.Producto;
import Negocio.Detalle_PreparacionBo;
import Negocio.PreparacionAlimentoBo;
import Negocio.ProductoBo;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

public class panelPrepAlimento extends javax.swing.JPanel {

    /**
     * Creates new form panelPrepAlimento
     */
    private Modelo_Tabla_PreparacionAlimento MTPA = new Modelo_Tabla_PreparacionAlimento();
    private DefaultTableModel detalleCompraTableModel;
    private Personal objPeronal = null;
    private PreparacionAlimento objPAlim = null;
    private Producto objProdc = null;

    public panelPrepAlimento(Personal objPersonal) {
        initComponents();
        this.cargarFecha();
        this.objPeronal = objPersonal;
        this.botonos();
        this.activarControles(false);
        this.cargarTabla();
        this.cargarTablaAdquirir();
        this.definirTamañoColumnaIngredientes();
        this.definirTamañoColumna();
        this.cargarTablaAdquirir();
        this.cargarDatosCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        comboProducto = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtStock = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        btnEditarAdquirir = new javax.swing.JButton();
        btnQuitar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaIngredientes = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        txtUnidadMedida = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDescripcionalimento = new javax.swing.JTextArea();
        comboTipoComida = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPreparacionAlimentos = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtFechaBus = new com.toedter.calendar.JDateChooser();
        btnbuscar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboTipoComidaBus = new javax.swing.JComboBox<>();

        jPanel2.setBackground(new java.awt.Color(255, 102, 102));

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/documento.png"))); // NOI18N
        btnNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disco-flexible.png"))); // NOI18N
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/codigo-limpio.png"))); // NOI18N
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cancelar.png"))); // NOI18N
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuevo)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnLimpiar)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiar)
                    .addComponent(btnNuevo)
                    .addComponent(btnGuardar)
                    .addComponent(btnCancelar))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 102, 102));

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("ALIMENTO A PREPARAR:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("TIPO COMIDA:");

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(153, 153, 153));

        comboProducto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboProducto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboProductoItemStateChanged(evt);
            }
        });
        comboProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboProductoKeyPressed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("PRODUCTO:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("STOCK");

        txtStock.setEditable(false);
        txtStock.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStockKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStockKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("CANTIDAD");

        txtCantidad.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCantidadKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
        });

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar.png"))); // NOI18N
        btnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEditarAdquirir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar.png"))); // NOI18N
        btnEditarAdquirir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditarAdquirir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarAdquirirActionPerformed(evt);
            }
        });

        btnQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/quitar-del-carrito.png"))); // NOI18N
        btnQuitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        tablaIngredientes = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int ColIndex){
                return false;
            }
        };
        tablaIngredientes.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tablaIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "DESCRIPCIÓN", "CANTIDAD"
            }
        ));
        tablaIngredientes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tablaIngredientes.setFocusable(false);
        tablaIngredientes.getTableHeader().setResizingAllowed(false);
        tablaIngredientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaIngredientes);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("UND:");

        txtUnidadMedida.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtUnidadMedida.setText("---");

        txtDescripcionalimento.setColumns(20);
        txtDescripcionalimento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtDescripcionalimento.setLineWrap(true);
        txtDescripcionalimento.setRows(5);
        txtDescripcionalimento.setWrapStyleWord(true);
        txtDescripcionalimento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescripcionalimentoKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(txtDescripcionalimento);

        comboTipoComida.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboTipoComida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECCIONE--", "DESAYUNO", "ALMUERZO", "CENA" }));
        comboTipoComida.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(comboTipoComida, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(comboProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, Short.MAX_VALUE)))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnEditarAdquirir, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtUnidadMedida)))
                                .addGap(0, 50, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboTipoComida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel12)
                    .addComponent(txtUnidadMedida))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEditarAdquirir)
                            .addComponent(btnQuitar)
                            .addComponent(btnAgregar)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );

        AutoCompleteDecorator.decorate(comboProducto);
        AutoCompleteDecorator.decorate(comboTipoComida);

        jPanel5.setBackground(new java.awt.Color(255, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PREAPARACIÓN DE ALIMENTOS REGISTRADOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tablaPreparacionAlimentos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tablaPreparacionAlimentos.setModel(this.MTPA);
        tablaPreparacionAlimentos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tablaPreparacionAlimentos.getTableHeader().setResizingAllowed(false);
        tablaPreparacionAlimentos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaPreparacionAlimentos);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar-informacion.png"))); // NOI18N
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png"))); // NOI18N
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        txtFechaBus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtFechaBus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFechaBusKeyPressed(evt);
            }
        });

        btnbuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/lupa.png"))); // NOI18N
        btnbuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("FECHA:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("TIP. COMIDA:");

        comboTipoComidaBus.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboTipoComidaBus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECCIONE--", "DESAYUNO", "ALMUERZO", "CENA" }));
        comboTipoComidaBus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFechaBus, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboTipoComidaBus, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnbuscar)
                .addGap(18, 18, 18)
                .addComponent(btnEditar)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar)
                .addGap(41, 41, 41))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEditar)
                            .addComponent(btnEliminar)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnbuscar))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFechaBus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(comboTipoComidaBus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AutoCompleteDecorator.decorate(comboTipoComidaBus);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.activarControles(true);
        this.limpiar();
        this.cargarTabla();
        this.cargarTablaAdquirir();
        this.cargarFecha();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        this.guardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.limpiar();
        this.cargarFecha();
        this.cargarTablaAdquirir();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.limpiar();
        this.activarControles(false);
        this.cargarTabla();
        this.cargarTablaAdquirir();
        this.cargarFecha();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtFechaBusKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFechaBusKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.comboTipoComidaBus.requestFocus();
        }
    }//GEN-LAST:event_txtFechaBusKeyPressed

    private void comboProductoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboProductoItemStateChanged
        this.obtenerProducto();
        if (this.objProdc != null) {
            if (!(this.objProdc.getDescripcion().equals("--Seleccione--"))) {
                this.txtUnidadMedida.setText(this.objProdc.getObjUM().getAbreviacion());
                this.txtStock.setText(String.valueOf(this.objProdc.getCantidad()));
                this.objProdc = null;
            }
        } else {
            this.txtUnidadMedida.setText("---");
            this.txtStock.setText("");
        }
    }//GEN-LAST:event_comboProductoItemStateChanged

    private void comboProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboProductoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtStock.requestFocus();
        }
    }//GEN-LAST:event_comboProductoKeyPressed

    private void txtStockKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStockKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtCantidad.requestFocus();
        }
    }//GEN-LAST:event_txtStockKeyPressed

    private void txtStockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStockKeyTyped
        this.validar_llenado(evt, 1);
        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtStockKeyTyped

    private void txtCantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.btnAgregar.doClick();
        }
    }//GEN-LAST:event_txtCantidadKeyPressed

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped
        this.validar_llenado(evt, 1);
        char c = evt.getKeyChar();
        if (c == ',' || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantidadKeyTyped

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEditarAdquirirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarAdquirirActionPerformed
        this.editarPreparacion();
    }//GEN-LAST:event_btnEditarAdquirirActionPerformed

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        this.quitar();
    }//GEN-LAST:event_btnQuitarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        this.editar();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarActionPerformed
        this.buscar();
    }//GEN-LAST:event_btnbuscarActionPerformed

    private void txtDescripcionalimentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescripcionalimentoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.comboTipoComida.requestFocus();
        }

        this.txtDescripcionalimento.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isLowerCase(c)) {
                    evt.setKeyChar(Character.toUpperCase(c));
                }
            }
        });
    }//GEN-LAST:event_txtDescripcionalimentoKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEditarAdquirir;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JButton btnbuscar;
    private javax.swing.JComboBox<Producto> comboProducto;
    private javax.swing.JComboBox<String> comboTipoComida;
    private javax.swing.JComboBox<String> comboTipoComidaBus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tablaIngredientes;
    private javax.swing.JTable tablaPreparacionAlimentos;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextArea txtDescripcionalimento;
    private com.toedter.calendar.JDateChooser txtFechaBus;
    private javax.swing.JTextField txtStock;
    private javax.swing.JLabel txtUnidadMedida;
    // End of variables declaration//GEN-END:variables

    private void validar_llenado(java.awt.event.KeyEvent evt, int opc) {
        //opc: 1 es para ingresar solo números
        //opc: 2 es para ingresar solo letras
        char validar = evt.getKeyChar();
        if (opc == 1) {
            if (Character.isLetter(validar) && validar != KeyEvent.VK_SPACE
                    && validar != KeyEvent.VK_ENTER) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        }
        if (opc == 2) {
            if (Character.isDigit(validar) && validar != KeyEvent.VK_SPACE
                    && validar != KeyEvent.VK_ENTER) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        }
    }

    private String convertDateBD(String dateStr) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate date = LocalDate.parse(dateStr, formatter);
        return date.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
    }

    private String convertDate(String dateStr) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate date = LocalDate.parse(dateStr, formatter);
        return date.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
    }

    private void cargarFecha() {
        Calendar cal = Calendar.getInstance();
        Timestamp fecha_hora = new Timestamp(cal.getTimeInMillis());
        String fechaSistema = String.valueOf(fecha_hora);
        try {
            java.util.Date fechaParseada = new SimpleDateFormat("dd/MM/yyyy").parse(this.convertDate(fechaSistema.substring(0, 10)));
            this.txtFechaBus.setDate(fechaParseada);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void botonos() {
        this.btnCancelar.setOpaque(false);
        this.btnCancelar.setContentAreaFilled(false);
        this.btnCancelar.setBorderPainted(false);
        this.btnCancelar.setToolTipText("Cancelar");

        this.btnNuevo.setOpaque(false);
        this.btnNuevo.setContentAreaFilled(false);
        this.btnNuevo.setBorderPainted(false);
        this.btnNuevo.setToolTipText("Nuevo");

        this.btnGuardar.setOpaque(false);
        this.btnGuardar.setContentAreaFilled(false);
        this.btnGuardar.setBorderPainted(false);
        this.btnGuardar.setToolTipText("Guardar");

        this.btnLimpiar.setOpaque(false);
        this.btnLimpiar.setContentAreaFilled(false);
        this.btnLimpiar.setBorderPainted(false);
        this.btnLimpiar.setToolTipText("Limpiar");

        this.btnEditar.setOpaque(false);
        this.btnEditar.setContentAreaFilled(false);
        this.btnEditar.setBorderPainted(false);
        this.btnEditar.setToolTipText("Editar");

        this.btnEliminar.setOpaque(false);
        this.btnEliminar.setContentAreaFilled(false);
        this.btnEliminar.setBorderPainted(false);
        this.btnEliminar.setToolTipText("Eliminar");

        this.btnEditarAdquirir.setOpaque(false);
        this.btnEditarAdquirir.setContentAreaFilled(false);
        this.btnEditarAdquirir.setBorderPainted(false);
        this.btnEditarAdquirir.setToolTipText("Editar Producto");

        this.btnAgregar.setOpaque(false);
        this.btnAgregar.setContentAreaFilled(false);
        this.btnAgregar.setBorderPainted(false);
        this.btnAgregar.setToolTipText("Agregar Producto");

        this.btnQuitar.setOpaque(false);
        this.btnQuitar.setContentAreaFilled(false);
        this.btnQuitar.setBorderPainted(false);
        this.btnQuitar.setToolTipText("Quitar Producto");

        this.btnbuscar.setOpaque(false);
        this.btnbuscar.setContentAreaFilled(false);
        this.btnbuscar.setBorderPainted(false);
        this.btnbuscar.setToolTipText("Buscar");
    }

    private void activarControles(boolean estado) {
        this.txtDescripcionalimento.setEnabled(estado);
        this.comboTipoComida.setEnabled(estado);
        this.comboProducto.setEnabled(estado);
        this.txtStock.setEnabled(estado);
        this.txtCantidad.setEnabled(estado);
        this.btnAgregar.setEnabled(estado);
        this.btnQuitar.setEnabled(estado);
        this.btnEditarAdquirir.setEnabled(estado);
        this.tablaIngredientes.setEnabled(estado);
        this.btnGuardar.setEnabled(estado);
        this.btnLimpiar.setEnabled(estado);
        this.btnCancelar.setEnabled(estado);

        this.btnNuevo.setEnabled(!estado);
        this.btnEditar.setEnabled(!estado);
        this.btnEliminar.setEnabled(!estado);
        this.comboTipoComidaBus.setEnabled(!estado);
        this.txtFechaBus.setEnabled(!estado);
        this.tablaPreparacionAlimentos.setEnabled(!estado);

        if (estado) {
            this.tablaPreparacionAlimentos.setBackground(new java.awt.Color(255, 102, 102));
            this.tablaIngredientes.setBackground(new java.awt.Color(255, 255, 255));
        } else {
            this.tablaPreparacionAlimentos.setBackground(new java.awt.Color(255, 255, 255));
            this.tablaIngredientes.setBackground(new java.awt.Color(255, 102, 102));
        }
    }

    private void cargarTabla() {
        try {
            ArrayList<PreparacionAlimento> ltsPreparacionAlimento = PreparacionAlimentoBo.obtenerListaPreparacion();
            MTPA.setListado_PreparacionAlimento(ltsPreparacionAlimento);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void definirTamañoColumna() {
        TableColumnModel columnModel = this.tablaPreparacionAlimentos.getColumnModel();

        columnModel.getColumn(0).setPreferredWidth(80);
        columnModel.getColumn(1).setPreferredWidth(100);
        columnModel.getColumn(2).setPreferredWidth(550);

        this.tablaPreparacionAlimentos.getTableHeader().setFont(new Font("Tahoma", 1, 12));
        ((DefaultTableCellRenderer) this.tablaPreparacionAlimentos.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }

    private void cargarTablaAdquirir() {
        detalleCompraTableModel = new DefaultTableModel();
        this.tablaIngredientes.setModel(detalleCompraTableModel);
        String titu[] = {"ID", "DESCRIPCIÓN", "CANTIDAD"};
        detalleCompraTableModel.setColumnIdentifiers(titu);
        this.tablaIngredientes.getColumnModel().getColumn(0).setPreferredWidth(30);
        this.tablaIngredientes.getColumnModel().getColumn(1).setPreferredWidth(200);

        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        DefaultTableCellRenderer tcc = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tcc.setHorizontalAlignment(SwingConstants.CENTER);
        this.tablaIngredientes.getColumnModel().getColumn(2).setCellRenderer(tcr);
    }

    private void definirTamañoColumnaIngredientes() {
        TableColumnModel columnModel = this.tablaIngredientes.getColumnModel();

        columnModel.getColumn(0).setPreferredWidth(80);
        columnModel.getColumn(1).setPreferredWidth(300);
        columnModel.getColumn(2).setPreferredWidth(80);

        this.tablaIngredientes.getTableHeader().setFont(new Font("Tahoma", 1, 12));
        ((DefaultTableCellRenderer) this.tablaIngredientes.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }

    private void obtenerProducto() {
        if (comboProducto.getItemAt(comboProducto.getSelectedIndex()) != null) {
            this.objProdc = comboProducto.getItemAt(comboProducto.getSelectedIndex());
        }
    }

    private void guardar() {
        if (this.validar() == 0) {
            PreparacionAlimento objPrepAllim = new PreparacionAlimento(0, this.txtDescripcionalimento.getText().trim(),
                    this.comboTipoComida.getSelectedItem().toString(), 1, this.objPeronal);
            try {
                if (this.objPAlim == null) {
                    //Registramos la preparacion
                    if (PreparacionAlimentoBo.grabarPreparacionAlimento(objPrepAllim)) {
                        JOptionPane.showMessageDialog(this, "Se Registró Correctamente", "MENSAJE --> PREPARACIÓN ALIMENTO", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudo Registrar", "MENSAJE --> PREPARACIÓN ALIMENTO", JOptionPane.ERROR_MESSAGE);
                    }
                    int id = PreparacionAlimentoBo.ultimoIdPreparacion();

                    //Registramos el Detalle de la preparacion
                    objPrepAllim.setId(id);
                    ArrayList<Detalle_Preparacion> arrDet = this.obtenerDetallesOrden(objPrepAllim); //Preparar los detalles de la Compra en ArrayList, obtenidos del JTable.
                    for (Detalle_Preparacion DP : arrDet) {
                        //Agregar Stock y precio
                        ProductoBo.actualizarProductoVenta(DP.getObjP(), DP.getCantidad());

                        //Guardamos detalle compra
                        Detalle_PreparacionBo.grabarDetPreparacionAlim(DP);
                    }

                    this.limpiar();
                    this.activarControles(false);
                    this.cargarTabla();
                    this.cargarTablaAdquirir();
                } else {
                    objPrepAllim.setId(this.objPAlim.getId());

                    if (PreparacionAlimentoBo.modificarPreparacionAlimento(objPrepAllim)) {
                        JOptionPane.showMessageDialog(this, "Se Modificó Correctamente", "MENSAJE --> PREPARACIÓN ALIMENTO", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudo Modificar", "MENSAJE --> PREPARACIÓN ALIMENTO", JOptionPane.ERROR_MESSAGE);
                    }

                    //Eliminamos los producto ya existentes
                    ArrayList<Detalle_Preparacion> ltsDetPrep = Detalle_PreparacionBo.obtenerListaDetPreparacion(objPrepAllim.getId());
                    for (Detalle_Preparacion DP : ltsDetPrep) {
                        ProductoBo.actualizarProductoCompra(DP.getObjP(), DP.getCantidad(), DP.getObjP().getPrecio());
                    }
                    Detalle_PreparacionBo.eliminarDetPreparacionAlim(objPrepAllim.getId());

                    //Registramos el Detalle de la Compra
                    ArrayList<Detalle_Preparacion> arrDet = this.obtenerDetallesOrden(objPrepAllim); //Preparar los detalles de la Compra en ArrayList, obtenidos del JTable.
                    for (Detalle_Preparacion DP : arrDet) {
                        //Agregar Stock y precio
                        ProductoBo.actualizarProductoVenta(DP.getObjP(), DP.getCantidad());

                        //Guardamos detalle compra
                        Detalle_PreparacionBo.grabarDetPreparacionAlim(DP);
                    }

                    this.limpiar();
                    this.activarControles(false);
                    this.cargarTabla();
                    this.cargarTablaAdquirir();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

            this.cargarDatosCombo();
        } else {
            JOptionPane.showMessageDialog(this, "Porfavor!!!\nVerifique que los campos esten correptamente ingresados", "MENSAJE --> LLENADO", JOptionPane.WARNING_MESSAGE);
        }
    }

    private int validar() {
        int correcto = 0;
        if (this.txtDescripcionalimento.getText().trim().equals("")
                || this.comboTipoComida.getSelectedIndex() == 0) {
            correcto = 1;
        }
        return correcto;
    }

    private void limpiar() {
        this.txtDescripcionalimento.setText("");
        this.comboTipoComida.setSelectedIndex(0);
        this.comboProducto.setSelectedIndex(0);
        this.txtStock.setText("");
        this.txtCantidad.setText("");
        this.txtUnidadMedida.setText("---");

        objPAlim = null;
        objProdc = null;
    }

    private void agregar() {
        if (comboProducto.getSelectedIndex() == 0 || this.txtCantidad.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Complete los campos correctamente", "AGREGAR --> PRODUCTO", JOptionPane.WARNING_MESSAGE);
        } else {
            this.obtenerProducto();
            String rowData[] = new String[5];
            String producto = "";
            int cantidad, codigo;

            if (this.buscarProducto(this.objProdc) == 0) {
                codigo = this.objProdc.getId();
                producto = this.objProdc.getDescripcion();
                cantidad = Integer.parseInt(this.txtCantidad.getText());

                if (cantidad <= Integer.parseInt(this.txtStock.getText().trim())) {
                    rowData[0] = String.valueOf(codigo);
                    rowData[1] = producto;
                    rowData[2] = String.valueOf(cantidad);
                    detalleCompraTableModel.addRow(rowData);

                    this.txtCantidad.setText("");
                    this.txtStock.setText("");
                    comboProducto.setSelectedIndex(0);
                } else {
                    JOptionPane.showMessageDialog(this, "La cantidad a ingresar no debe ser mayor al stock disponible.", "AGREGAR --> PRODUCTO", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "El producto ya se encuentra registrado.", "AGREGAR --> PRODUCTO", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    private int buscarProducto(Producto objProdc) {
        int estado = 0;
        for (int fila = 0; fila < this.tablaIngredientes.getRowCount(); fila++) {
            if (this.tablaIngredientes.getValueAt(fila, 0).toString().trim().equals(String.valueOf(objProdc.getId()))) {
                estado = 1;
                break;
            }
        }
        return estado;
    }

    private void editarPreparacion() {
        int fila;
        if (detalleCompraTableModel.getRowCount() > 0) {
            if (this.tablaIngredientes.getSelectedRow() != -1) {
                this.obtenerProducto();
                fila = this.tablaIngredientes.getSelectedRow();
                String codigo = this.tablaIngredientes.getValueAt(fila, 0).toString(); //Obtenees el codigo del producto
                try {
                    this.objProdc = ProductoBo.buscarProductoId(Integer.parseInt(codigo));
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
                comboProducto.getModel().setSelectedItem(objProdc); //Seleccionamos el producto
                this.txtCantidad.setText(this.tablaIngredientes.getValueAt(fila, 2).toString()); //Cargamos el JText Cantidad
                this.quitar();
            } else {
                JOptionPane.showMessageDialog(this, "No ha seleccionado un elemento de la tabla", "QUITAR PRODUCTO", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay ningún elemento en la tabla", "QUITAR PRODUCTO", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void quitar() {
        int fil;
        if (detalleCompraTableModel.getRowCount() > 0) {
            if (this.tablaIngredientes.getSelectedRow() != -1) {
                fil = this.tablaIngredientes.getSelectedRow();
                detalleCompraTableModel.removeRow(fil);
            } else {
                JOptionPane.showMessageDialog(this, "No ha seleccionado un elemento de la tabla", "QUITAR --> PRODUCTO", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay ningún elemento en la tabla", "QUITAR PRODUCTO", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void editar() {
        int fila = this.tablaPreparacionAlimentos.getSelectedRow();
        if (fila != -1) {
            this.objPAlim = MTPA.getPreparacionAlimento(fila);
            this.activarControles(true);
            this.cargarTabla();
            this.cargarTablaAdquirir();
            this.cargarDatos(objPAlim);
        } else {
            JOptionPane.showMessageDialog(this, "Usted no a seleccionado un campo en la tabla.", "MENSAJE --> PREPARACIÓN ALIMENTOS", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void eliminar() {
        if (this.tablaPreparacionAlimentos.getSelectedRow() != -1) {
            int fila = this.tablaPreparacionAlimentos.getSelectedRow();
            PreparacionAlimento objPre = MTPA.getPreparacionAlimento(fila);
            int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar la comida "
                    + objPre.toString() + " ?", "ELIMINAR --> COMIDA", JOptionPane.YES_NO_OPTION);
            if (confirm == 0) {
                try {
                    if (PreparacionAlimentoBo.eliminarPreparacionAlimento(objPre)) {
                        this.cargarTabla();
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudo Eliminar", "MENSAJE --> COMIDA", JOptionPane.ERROR_MESSAGE);
                    }
                    //Editamos stock
                    ArrayList<Detalle_Preparacion> ltsDetPrep = Detalle_PreparacionBo.obtenerListaDetPreparacion(objPre.getId());
                    for (Detalle_Preparacion DP : ltsDetPrep) {
                        ProductoBo.actualizarProductoCompra(DP.getObjP(), DP.getCantidad(), DP.getObjP().getPrecio());
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un elemento de la tabla.", "MENSAJE --> COMIDA", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void cargarDatos(PreparacionAlimento objPAlim) {
        this.txtDescripcionalimento.setText(objPAlim.getDescripcionAlimento());
        this.comboTipoComida.setSelectedItem(objPAlim.getTipoAlmuerzo());

        this.cargarTablaDetalle(objPAlim);
    }

    private void cargarTablaDetalle(PreparacionAlimento objPAlim) {
        try {
            ArrayList<Detalle_Preparacion> ltsDetPrep = Detalle_PreparacionBo.obtenerListaDetPreparacion(objPAlim.getId());
            for (Detalle_Preparacion DC : ltsDetPrep) {
                String rowData[] = new String[5];
                String codigo = String.valueOf(DC.getObjP().getId());
                String descripcion = DC.getObjP().getDescripcion();
                String cantidad = String.valueOf(DC.getCantidad());

                rowData[0] = codigo;
                rowData[1] = descripcion;
                rowData[2] = cantidad;
                detalleCompraTableModel.addRow(rowData);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void buscar() {
        String fecha = this.convertDateBD(((JTextField) this.txtFechaBus.getDateEditor().getUiComponent()).getText());

        if (!(fecha.equals("") || this.comboTipoComidaBus.getSelectedIndex() == 0)) {
            ArrayList<PreparacionAlimento> ltsPre = new ArrayList();
            try {
                ltsPre = PreparacionAlimentoBo.buscarPreparacion(fecha, this.comboTipoComidaBus.getSelectedItem().toString());
                MTPA.setListado_PreparacionAlimento(ltsPre);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe especifica de que fecha desea realizar la busqueda y el tipo de comida.", "BUSCAR --> PREPARACIÓN ALIMENTO", JOptionPane.WARNING_MESSAGE);
        }
    }

    private ArrayList obtenerDetallesOrden(PreparacionAlimento objPA) {
        ArrayList listDet = new ArrayList();
        for (int fila = 0; fila < this.tablaIngredientes.getRowCount(); fila++) {
            Detalle_Preparacion objDP = new Detalle_Preparacion();
            //Obtenemos el producto
            Producto objProducto = new Producto();
            String codigo = this.tablaIngredientes.getValueAt(fila, 0).toString(); //Obtenees el codigo del producto
            try {
                objProducto = ProductoBo.buscarProductoId(Integer.parseInt(codigo));
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            objDP.setCantidad(Integer.parseInt(detalleCompraTableModel.getValueAt(fila, 2).toString()));
            objDP.setObjPA(objPA);
            objDP.setObjP(objProducto);
            listDet.add(objDP);
        }
        return listDet;
    }

    private void cargarDatosCombo() {
        this.comboProducto.removeAllItems();
        Producto objProd = new Producto();
        objProd.setDescripcion("--Seleccione--");
        this.comboProducto.addItem(objProd);

        try {
            ProductoBo.llenarComboProducto(comboProducto);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
