package Vista;

import Datos.Proveedor;
import Datos.Documento;
import Datos.Modelo_Tabla_Proveedor;
import Negocio.DocumentoBo;
import Negocio.ProveedorBo;
import java.awt.Font;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;
import java.awt.event.KeyAdapter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

public class panelProveedor extends javax.swing.JPanel {

    /**
     * Creates new form panelProveedor
     */
    
    private Modelo_Tabla_Proveedor MTP = new Modelo_Tabla_Proveedor();
    private Proveedor objP = null;
    private Documento objD = null;
    private int estado = 1;
    
    public panelProveedor() {
        initComponents();
        this.botonos();
        this.activarControles(false);
        this.definir_tama√±o_columna();
        this.cargarTabla();
        this.cargarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnEstado = new javax.swing.JCheckBox();
        labelNombre = new javax.swing.JLabel();
        txtRazonSocial = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNroDocumento = new javax.swing.JTextField();
        comboDocumento = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        txtBuscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProveedor = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();

        jPanel2.setBackground(new java.awt.Color(255, 102, 102));

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/documento.png"))); // NOI18N
        btnNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disco-flexible.png"))); // NOI18N
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/codigo-limpio.png"))); // NOI18N
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cancelar.png"))); // NOI18N
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuevo)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnLimpiar)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addContainerGap(818, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiar)
                    .addComponent(btnNuevo)
                    .addComponent(btnGuardar)
                    .addComponent(btnCancelar))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 102, 102));

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        btnEstado.setBackground(new java.awt.Color(255, 204, 204));
        btnEstado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnEstado.setSelected(true);
        btnEstado.setText("ACTIVO");
        btnEstado.setToolTipText("");
        btnEstado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEstado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/seleccion.png"))); // NOI18N
        btnEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstadoActionPerformed(evt);
            }
        });

        labelNombre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelNombre.setText("RAZON SOCIAL:");

        txtRazonSocial.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtRazonSocial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRazonSocialKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRazonSocialKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("NRO. DOCUMENTO:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("TIP. DOCUMENTO:");

        txtNroDocumento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNroDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNroDocumentoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNroDocumentoKeyTyped(evt);
            }
        });

        comboDocumento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboDocumento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboDocumentoItemStateChanged(evt);
            }
        });
        comboDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboDocumentoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelNombre)
                                    .addComponent(jLabel2)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(comboDocumento, javax.swing.GroupLayout.Alignment.LEADING, 0, 250, Short.MAX_VALUE)
                            .addComponent(txtRazonSocial, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNroDocumento)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(btnEstado)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombre)
                    .addComponent(txtRazonSocial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNroDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(34, 34, 34)
                .addComponent(btnEstado)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        AutoCompleteDecorator.decorate(comboDocumento);

        jPanel5.setBackground(new java.awt.Color(255, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PROVEEDORES REGISTRADOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        txtBuscar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBuscarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarKeyTyped(evt);
            }
        });

        tablaProveedor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tablaProveedor.setModel(this.MTP);
        tablaProveedor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tablaProveedor.getTableHeader().setResizingAllowed(false);
        tablaProveedor.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaProveedor);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar-informacion.png"))); // NOI18N
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png"))); // NOI18N
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(103, Short.MAX_VALUE)
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEditar)
                .addGap(36, 36, 36)
                .addComponent(btnEliminar)
                .addGap(61, 61, 61))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEditar)
                            .addComponent(btnEliminar)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.activarControles(true);
        this.limpiar();
        this.cargarTabla();
        this.txtBuscar.setText("");
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        this.guardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.limpiar();
        this.activarControles(false);
        this.cargarTabla();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstadoActionPerformed
        this.clicButtonEstado();
    }//GEN-LAST:event_btnEstadoActionPerformed

    private void txtRazonSocialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRazonSocialKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.comboDocumento.requestFocus();
        }

        this.txtRazonSocial.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isLowerCase(c)) {
                    evt.setKeyChar(Character.toUpperCase(c));
                }
            }
        });
    }//GEN-LAST:event_txtRazonSocialKeyPressed

    private void txtRazonSocialKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRazonSocialKeyTyped
        this.validar_llenado(evt, 2);
        if (this.txtNroDocumento.getText().trim().length() >= 100) {
            getToolkit().beep(); //sonido de alerta
            evt.consume();
        }
        txtNroDocumento.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                String texto = txtNroDocumento.getText() + e.getKeyChar();
                if (texto.matches(".*(.)\\1{2,}.*")) {
                    e.consume(); // Ignora la tecla si tiene m√°s de 2 caracteres iguales seguidos
                }
            }
        });
        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtRazonSocialKeyTyped

    private void txtNroDocumentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroDocumentoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.btnGuardar.doClick();
        }
    }//GEN-LAST:event_txtNroDocumentoKeyPressed

    private void txtNroDocumentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroDocumentoKeyTyped
        this.validar_llenado(evt, 1);

        if (this.comboDocumento.getSelectedIndex() == 1) {
            if (this.txtNroDocumento.getText().trim().length() >= 8) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        } else {
            if (this.txtNroDocumento.getText().trim().length() >= 11) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        }
        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
        if (Character.isWhitespace(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNroDocumentoKeyTyped

    private void comboDocumentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboDocumentoItemStateChanged
        this.txtNroDocumento.setText("");
    }//GEN-LAST:event_comboDocumentoItemStateChanged

    private void comboDocumentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboDocumentoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtNroDocumento.requestFocus();
        }
    }//GEN-LAST:event_comboDocumentoKeyPressed

    private void txtBuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyPressed
        this.txtBuscar.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isLowerCase(c)) {
                    evt.setKeyChar(Character.toUpperCase(c));
                }
            }
        });
    }//GEN-LAST:event_txtBuscarKeyPressed

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        this.buscar();
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void txtBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyTyped
        this.validar_llenado(evt, 2);
        if (this.txtBuscar.getText().trim().length() >= 100) {
            getToolkit().beep(); //sonido de alerta
            evt.consume();
        }
        txtBuscar.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                String texto = txtBuscar.getText() + e.getKeyChar();
                if (texto.matches(".*(.)\\1{2,}.*")) {
                    e.consume(); // Ignora la tecla si tiene m√°s de 2 caracteres iguales seguidos
                }
            }
        });
        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtBuscarKeyTyped

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        this.buttonEditar();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JCheckBox btnEstado;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox<Documento> comboDocumento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JTable tablaProveedor;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtNroDocumento;
    private javax.swing.JTextField txtRazonSocial;
    // End of variables declaration//GEN-END:variables

    private void validar_llenado(java.awt.event.KeyEvent evt, int opc) {
        //opc: 1 es para ingresar solo n√∫meros
        //opc: 2 es para ingresar solo letras
        char validar = evt.getKeyChar();
        if (opc == 1) {
            if (Character.isLetter(validar) && validar != KeyEvent.VK_SPACE
                    && validar != KeyEvent.VK_ENTER) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        }
        if (opc == 2) {
            if (Character.isDigit(validar) && validar != KeyEvent.VK_SPACE
                    && validar != KeyEvent.VK_ENTER) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        }
    }

    private void clicButtonEstado() {
        if (this.btnEstado.isSelected()) {
            ImageIcon icono = new ImageIcon("src/Imagenes/seleccion.png");
            this.btnEstado.setIcon(icono);
            this.btnEstado.setText("ACTIVO");
            estado = 1;
        } else {
            ImageIcon icono = new ImageIcon("src/Imagenes/no-seleccion.png");
            this.btnEstado.setIcon(icono);
            this.btnEstado.setText("INACTIVO");
            estado = 0;
        }
    }

    private void botonos() {
        this.btnCancelar.setOpaque(false);
        this.btnCancelar.setContentAreaFilled(false);
        this.btnCancelar.setBorderPainted(false);
        this.btnCancelar.setToolTipText("CANCELAR");

        this.btnNuevo.setOpaque(false);
        this.btnNuevo.setContentAreaFilled(false);
        this.btnNuevo.setBorderPainted(false);
        this.btnNuevo.setToolTipText("NUEVO REGISTRO");

        this.btnGuardar.setOpaque(false);
        this.btnGuardar.setContentAreaFilled(false);
        this.btnGuardar.setBorderPainted(false);
        this.btnGuardar.setToolTipText("GUARDAR");

        this.btnLimpiar.setOpaque(false);
        this.btnLimpiar.setContentAreaFilled(false);
        this.btnLimpiar.setBorderPainted(false);
        this.btnLimpiar.setToolTipText("LIMPIAR");

        this.btnEliminar.setOpaque(false);
        this.btnEliminar.setContentAreaFilled(false);
        this.btnEliminar.setBorderPainted(false);
        this.btnEliminar.setToolTipText("ELIMINAR");

        this.btnEditar.setOpaque(false);
        this.btnEditar.setContentAreaFilled(false);
        this.btnEditar.setBorderPainted(false);
        this.btnEditar.setToolTipText("EDITAR");
    }

    private void activarControles(boolean estado) {
        this.txtRazonSocial.setEnabled(estado);
        this.txtNroDocumento.setEnabled(estado);
        this.comboDocumento.setEnabled(estado);
        this.btnGuardar.setEnabled(estado);
        this.btnLimpiar.setEnabled(estado);
        this.btnCancelar.setEnabled(estado);
        this.btnEstado.setEnabled(estado);

        this.btnNuevo.setEnabled(!estado);
        this.btnEditar.setEnabled(!estado);
        this.txtBuscar.setEnabled(!estado);
        this.tablaProveedor.setEnabled(!estado);
        this.btnEliminar.setEnabled(!estado);

        if (estado) {
            tablaProveedor.setBackground(new java.awt.Color(255, 102, 102));
        } else {
            tablaProveedor.setBackground(new java.awt.Color(255, 255, 255));
        }
    }

    private void limpiar() {
        this.txtRazonSocial.setText("");
        this.txtNroDocumento.setText("");
        this.comboDocumento.setSelectedIndex(0);

        this.btnEstado.setSelected(true);
        ImageIcon icono = new ImageIcon("src/Imagenes/seleccion.png");
        this.btnEstado.setIcon(icono);
        this.btnEstado.setText("ACTIVO");

        objP = null;
        objD = null;
        estado = 1;
    }

    private void cargarTabla() {
        try {
            ArrayList<Proveedor> ltsProveedor = ProveedorBo.obtenerListaProveedor();
            MTP.setListado_Proveedor(ltsProveedor);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void definir_tama√±o_columna() {
        TableColumnModel columnModel = this.tablaProveedor.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(300);
        columnModel.getColumn(1).setPreferredWidth(130);
        columnModel.getColumn(2).setPreferredWidth(130);
        columnModel.getColumn(3).setPreferredWidth(100);

        this.tablaProveedor.getTableHeader().setFont(new Font("Tahoma", 1, 12));
        ((DefaultTableCellRenderer) this.tablaProveedor.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }

    private void guardar() {
        if (this.general() && this.validarNroDocumento() != 1) {
            this.obtenerCombo();
            Proveedor objProd = new Proveedor(0, this.txtRazonSocial.getText(), this.txtNroDocumento.getText(), this.objD, this.estado);
            try {
                if (this.objP == null) {
                    if (ProveedorBo.buscarDNI(this.txtNroDocumento.getText())) {
                        if (ProveedorBo.buscarRazonSocial(this.txtRazonSocial.getText())) {
                            if (ProveedorBo.grabarProveedor(objProd)) {
                                JOptionPane.showMessageDialog(this, "Se Registr√≥ Correctamente", "MENSAJE --> PROVEEDOR", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(this, "No se pudo Registrar", "MENSAJE --> PROVEEDOR", JOptionPane.ERROR_MESSAGE);
                            }
                            this.limpiar();
                            this.activarControles(false);
                            this.cargarTabla();
                        } else {
                            JOptionPane.showMessageDialog(this, "La Raz√≥n Social ya se encuentra registrada.", "MENSAJE --> PROVEEDOR", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "El Nro. Documento ya se encuentra registrado.", "MENSAJE --> PROVEEDOR", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    boolean existeRazonSocial = true;
                    boolean existeDNI = true;
                    objProd.setId(this.objP.getId());

                    if (!objProd.getRazonSocial().equals(this.objP.getRazonSocial())) {
                        existeRazonSocial = ProveedorBo.buscarRazonSocial(this.txtRazonSocial.getText());
                    }

                    if (!objProd.getNrodocumento().equals(this.objP.getNrodocumento())) {
                        existeDNI = ProveedorBo.buscarDNI(this.txtNroDocumento.getText());
                    }

                    if (existeDNI) {
                        if (existeRazonSocial) {
                            if (ProveedorBo.modificarProveedor(objProd)) {
                                JOptionPane.showMessageDialog(this, "Se Modific√≥ Correctamente", "MENSAJE --> PROVEEDOR", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(this, "No se pudo Modificar", "MENSAJE --> PROVEEDOR", JOptionPane.ERROR_MESSAGE);
                            }
                            this.limpiar();
                            this.activarControles(false);
                            this.cargarTabla();
                        } else {
                            JOptionPane.showMessageDialog(this, "La Raz√≥n Social ya se encuentra registrada.", "MENSAJE --> PROVEEDOR", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "El Nro. Documento ya se encuentra registrado.", "MENSAJE --> PROVEEDOR", JOptionPane.WARNING_MESSAGE);
                    }
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Verifique que todos los campos hallan sido llenados.", "MENSAJE --> PROVEEDOR", JOptionPane.WARNING_MESSAGE);
        }
    }

    private boolean general() {
        if (this.txtRazonSocial.getText().trim().equals("") || this.txtNroDocumento.getText().trim().equals("")
                || this.comboDocumento.getSelectedIndex() == 0) {
            return false;

        } else {
            return true;
        }
    }

    private void buscar() {
        String buscar = this.txtBuscar.getText().trim();
        ArrayList<Proveedor> ltsProveedor = new ArrayList();
        try {
            ltsProveedor = ProveedorBo.buscarRazonSocialProveedor(buscar);
            if (ltsProveedor.isEmpty()) {
                ltsProveedor = ProveedorBo.buscarDNIProveedor(buscar);
            }
            MTP.setListado_Proveedor(ltsProveedor);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void eliminar() {
        if (this.tablaProveedor.getSelectedRow() != -1) {
            int fila = this.tablaProveedor.getSelectedRow();
            Proveedor objProv = MTP.getProveedor(fila);
            if (objProv.getEstado() == 1) {
                int confirm = JOptionPane.showConfirmDialog(this, "¬øEst√° seguro que desea eliminar el proveedor "
                        + objProv.toString() + " ?", "ELIMINAR --> PROVEEDOR", JOptionPane.YES_NO_OPTION);
                if (confirm == 0) {
                    try {
                        if (ProveedorBo.eliminarProveedor(objProv)) {
                            this.cargarTabla();
                            this.limpiar();
                            this.activarControles(false);
                        } else {
                            JOptionPane.showMessageDialog(this, "No se pudo Eliminar", "MENSAJE --> PROVEEDOR", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "El proveedor selecionada ya se encuentra Inactivo.", "MENSAJE --> PROVEEDOR", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Usted no a seleccionado un campo en la tabla.", "MENSAJE --> PROVEEDOR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void buttonEditar() {
        this.txtBuscar.setText("");
        int fila = this.tablaProveedor.getSelectedRow();
        if (fila != -1) {
            this.objP = MTP.getProveedor(fila);
            this.activarControles(true);
            this.cargarDatos(objP);
            this.cargarTabla();
            this.btnLimpiar.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Usted no a seleccionado un campo en la tabla.", "MENSAJE --> PROVEEDOR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarDatos(Proveedor objP) {
        this.txtRazonSocial.setText(objP.getRazonSocial());
        this.comboDocumento.getModel().setSelectedItem(objP.getObjD());
        this.txtNroDocumento.setText(objP.getNrodocumento());

        if (objP.getEstado() == 1) {
            this.btnEstado.setSelected(true);
            ImageIcon icono = new ImageIcon("src/Imagenes/seleccion.png");
            this.btnEstado.setIcon(icono);
            this.btnEstado.setText("ACTIVO");
            this.estado = 1;
        } else {
            this.btnEstado.setSelected(false);
            ImageIcon icono = new ImageIcon("src/Imagenes/no-seleccion.png");
            this.btnEstado.setIcon(icono);
            this.btnEstado.setText("INACTIVO");
            this.estado = 0;
        }
        
        this.objD = objP.getObjD();
    }

    private void cargarCombo() {
        this.comboDocumento.removeAllItems();
        Documento objDoc = new Documento();
        objDoc.setNombre("--Seleccione--");
        this.comboDocumento.addItem(objDoc);

        try {
            DocumentoBo.obtenerListaComboTipDoc(comboDocumento);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void obtenerCombo() {
        if (this.comboDocumento.getItemAt(this.comboDocumento.getSelectedIndex()) != null) {
            this.objD = this.comboDocumento.getItemAt(this.comboDocumento.getSelectedIndex());
        }
    }
    
    private int validarNroDocumento(){
        int validador = 0;
        if (this.comboDocumento.getSelectedIndex() == 1) {
            if (this.txtNroDocumento.getText().trim().length() < 8) {
                validador = 1;
            }
        }
        if (this.comboDocumento.getSelectedIndex() == 2) {
            if (this.txtNroDocumento.getText().trim().length() < 11) {
                validador = 1;
            }
        }
        return validador;
    }
}
