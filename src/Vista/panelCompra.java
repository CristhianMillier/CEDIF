package Vista;

import Datos.Compra;
import Datos.Modelo_Tabla_Compra;
import Datos.Comprobante;
import Datos.DetCompra;
import Datos.Personal;
import Datos.Producto;
import Datos.Proveedor;
import Datos.imgTabla;
import Negocio.CompraBo;
import Negocio.ComprobanteBo;
import Negocio.DetCompraBo;
import Negocio.ProductoBo;
import Negocio.ProveedorBo;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

public class panelCompra extends javax.swing.JPanel {

    /**
     * Creates new form panelCompra
     */
    private Modelo_Tabla_Compra MTC = new Modelo_Tabla_Compra();
    private String ruta_archivo = null;
    private byte[] documento = null;
    private Comprobante objComp = null;
    private Comprobante objCompBusc = null;
    private Proveedor objP = null;
    private Compra objC = null;
    private Producto objProdc = null;
    private DefaultTableModel detalleCompraTableModel;
    private Personal objPeronal = null;

    public panelCompra(Personal objPersonal) {
        initComponents();
        this.cargarFecha();
        this.objPeronal = objPersonal;
        this.tablaCompra.setDefaultRenderer(Object.class, new imgTabla());
        this.txtFecha.setCursor(new Cursor(Cursor.HAND_CURSOR));
        this.tablaCompra.setRowHeight(30);
        this.botonos();
        this.activarControles(false);
        this.cargarTabla();
        this.cargarTablaAdquirir();
        this.definirTamañoColumnaAdquirir();
        this.definirTamañoColumna();
        this.cargarDatosCombo();
        this.txtPaogo.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        txtFecha = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        txtPaogo = new javax.swing.JTextField();
        txtNroComprobante = new javax.swing.JTextField();
        comboComprobante = new javax.swing.JComboBox<>();
        comboProveedor = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnCargarDocumento = new javax.swing.JButton();
        btnVerDocumento = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        comboProducto = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtCantidad = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        btnEditarAdquirir = new javax.swing.JButton();
        btnQuitar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCompraAdquirir = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        txtFechaCaduca = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        txtUnidadMedida = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        txtNrmComrpoBusc = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCompra = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        comboComprobanteBusc = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        jPanel2.setBackground(new java.awt.Color(255, 102, 102));

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/documento.png"))); // NOI18N
        btnNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disco-flexible.png"))); // NOI18N
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/codigo-limpio.png"))); // NOI18N
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cancelar.png"))); // NOI18N
        btnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuevo)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnLimpiar)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiar)
                    .addComponent(btnNuevo)
                    .addComponent(btnGuardar)
                    .addComponent(btnCancelar))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 102, 102));

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DATOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        txtFecha.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtFecha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFechaKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("FECHA:");

        txtPaogo.setEditable(false);
        txtPaogo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtNroComprobante.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNroComprobante.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNroComprobanteKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNroComprobanteKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNroComprobanteKeyTyped(evt);
            }
        });

        comboComprobante.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboComprobante.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        comboComprobante.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboComprobanteKeyPressed(evt);
            }
        });

        comboProveedor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboProveedor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        comboProveedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboProveedorKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("COMPROBANTE:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("NRO. COMPROBANTE:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("PAGO:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("PROVEEDOR:");

        btnCargarDocumento.setBackground(new java.awt.Color(255, 102, 102));
        btnCargarDocumento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCargarDocumento.setText("CARGAR DOCUMENTO....");
        btnCargarDocumento.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCargarDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarDocumentoActionPerformed(evt);
            }
        });

        btnVerDocumento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/verDocumento.png"))); // NOI18N
        btnVerDocumento.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVerDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerDocumentoActionPerformed(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(153, 153, 153));

        comboProducto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboProducto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboProductoItemStateChanged(evt);
            }
        });
        comboProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboProductoKeyPressed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("PRODUCTO:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("CANTIDAD:");

        txtCantidad.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCantidadKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("PRECIO:");

        txtPrecio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPrecioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioKeyTyped(evt);
            }
        });

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar.png"))); // NOI18N
        btnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEditarAdquirir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar.png"))); // NOI18N
        btnEditarAdquirir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditarAdquirir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarAdquirirActionPerformed(evt);
            }
        });

        btnQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/quitar-del-carrito.png"))); // NOI18N
        btnQuitar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });

        tablaCompraAdquirir = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int ColIndex){
                return false;
            }
        };
        tablaCompraAdquirir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tablaCompraAdquirir.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "DESCRIPCIÓN", "CANTIDAD", "PRECIO C/U", "CADUCIDAD"
            }
        ));
        tablaCompraAdquirir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tablaCompraAdquirir.setFocusable(false);
        tablaCompraAdquirir.getTableHeader().setResizingAllowed(false);
        tablaCompraAdquirir.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tablaCompraAdquirir);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("FECHA DE CADUCIDAD:");

        txtFechaCaduca.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtFechaCaduca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFechaCaducaKeyPressed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("UND:");

        txtUnidadMedida.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtUnidadMedida.setText("---");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCargarDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnVerDocumento)
                .addGap(23, 23, 23))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNroComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPaogo, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFechaCaduca, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEditarAdquirir, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnQuitar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtUnidadMedida)))))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNroComprobante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPaogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCargarDocumento, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVerDocumento, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel12)
                    .addComponent(txtUnidadMedida))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFechaCaduca, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnEditarAdquirir)
                        .addComponent(btnQuitar)
                        .addComponent(btnAgregar)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        AutoCompleteDecorator.decorate(comboComprobante);
        AutoCompleteDecorator.decorate(comboProveedor);
        AutoCompleteDecorator.decorate(comboProducto);

        jPanel5.setBackground(new java.awt.Color(255, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "COMPRAS REGISTRADAS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        txtNrmComrpoBusc.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNrmComrpoBusc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNrmComrpoBuscKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNrmComrpoBuscKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNrmComrpoBuscKeyTyped(evt);
            }
        });

        tablaCompra.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tablaCompra.setModel(this.MTC);
        tablaCompra.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tablaCompra.getTableHeader().setResizingAllowed(false);
        tablaCompra.getTableHeader().setReorderingAllowed(false);
        tablaCompra.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCompraMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCompra);

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar-informacion.png"))); // NOI18N
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png"))); // NOI18N
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        comboComprobanteBusc.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        comboComprobanteBusc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        comboComprobanteBusc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboComprobanteBuscItemStateChanged(evt);
            }
        });
        comboComprobanteBusc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboComprobanteBuscKeyPressed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("COMPROBANTE:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("NUM:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboComprobanteBusc, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtNrmComrpoBusc, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(btnEditar)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar)
                .addGap(41, 41, 41))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEditar)
                            .addComponent(btnEliminar)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNrmComrpoBusc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboComprobanteBusc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        AutoCompleteDecorator.decorate(comboComprobanteBusc);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNrmComrpoBuscKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNrmComrpoBuscKeyPressed
        this.txtNrmComrpoBusc.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isLowerCase(c)) {
                    evt.setKeyChar(Character.toUpperCase(c));
                }
            }
        });
    }//GEN-LAST:event_txtNrmComrpoBuscKeyPressed

    private void txtNrmComrpoBuscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNrmComrpoBuscKeyReleased
        if (this.txtNrmComrpoBusc.getText().trim().length() == 4) {
            if (evt.getKeyCode() != 8) {
                String serie = this.txtNrmComrpoBusc.getText().trim();
                this.txtNrmComrpoBusc.setText(serie + "-");
            }
        }
        this.buscar();
    }//GEN-LAST:event_txtNrmComrpoBuscKeyReleased

    private void txtNrmComrpoBuscKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNrmComrpoBuscKeyTyped
        if (this.txtNrmComrpoBusc.getText().trim().length() >= 13) { //Factura
            getToolkit().beep(); //sonido de alerta
            evt.consume();
        }

        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
        if (Character.isWhitespace(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNrmComrpoBuscKeyTyped

    private void btnCargarDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarDocumentoActionPerformed
        this.seleccionar_pdf();
    }//GEN-LAST:event_btnCargarDocumentoActionPerformed

    private void btnVerDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerDocumentoActionPerformed
        this.abrirDocumento();
    }//GEN-LAST:event_btnVerDocumentoActionPerformed

    private void txtNroComprobanteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroComprobanteKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.comboProveedor.requestFocus();
        }

        this.txtNroComprobante.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                char c = evt.getKeyChar();
                if (Character.isLowerCase(c)) {
                    evt.setKeyChar(Character.toUpperCase(c));
                }
            }
        });
    }//GEN-LAST:event_txtNroComprobanteKeyPressed

    private void txtNroComprobanteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroComprobanteKeyTyped
        if (this.txtNroComprobante.getText().trim().length() >= 13) { //Factura
            getToolkit().beep(); //sonido de alerta
            evt.consume();
        }

        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
        if (Character.isWhitespace(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNroComprobanteKeyTyped

    private void txtFechaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFechaKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.comboComprobante.requestFocus();
        }
    }//GEN-LAST:event_txtFechaKeyPressed

    private void comboComprobanteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboComprobanteKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtNroComprobante.requestFocus();
        }
    }//GEN-LAST:event_comboComprobanteKeyPressed

    private void comboProveedorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboProveedorKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.comboProducto.requestFocus();
        }
    }//GEN-LAST:event_comboProveedorKeyPressed

    private void comboProductoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboProductoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtCantidad.requestFocus();
        }
    }//GEN-LAST:event_comboProductoKeyPressed

    private void txtCantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtPrecio.requestFocus();
        }
    }//GEN-LAST:event_txtCantidadKeyPressed

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped
        this.validar_llenado(evt, 1);
        char c = evt.getKeyChar();
        if (c == ',' || c == '.' || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtCantidadKeyTyped

    private void txtPrecioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtFechaCaduca.requestFocus();
        }
    }//GEN-LAST:event_txtPrecioKeyPressed

    private void txtPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioKeyTyped
        this.validar_llenado(evt, 1);
        char c = evt.getKeyChar();
        if (c == ',' || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioKeyTyped

    private void comboComprobanteBuscKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboComprobanteBuscKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.txtNrmComrpoBusc.requestFocus();
        }
    }//GEN-LAST:event_comboComprobanteBuscKeyPressed

    private void txtFechaCaducaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFechaCaducaKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            this.btnAgregar.doClick();
        }
    }//GEN-LAST:event_txtFechaCaducaKeyPressed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.activarControles(true);
        this.limpiar();
        this.cargarTabla();
        this.cargarTablaAdquirir();
        this.txtNrmComrpoBusc.setText("");
        this.cargarFecha();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.limpiar();
        this.cargarFecha();
        this.cargarTablaAdquirir();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.limpiar();
        this.activarControles(false);
        this.cargarTabla();
        this.cargarTablaAdquirir();
        this.cargarFecha();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        this.editar();
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEditarAdquirirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarAdquirirActionPerformed
        this.editarCompra();
    }//GEN-LAST:event_btnEditarAdquirirActionPerformed

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        this.quitar();
    }//GEN-LAST:event_btnQuitarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        this.guardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void comboProductoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboProductoItemStateChanged
        this.obtenerProducto();
        if (!(this.objProdc.getDescripcion().equals("--Seleccione--"))) {
            this.txtUnidadMedida.setText(this.objProdc.getObjUM().getAbreviacion());
            this.objProdc = null;
        } else{
            this.txtUnidadMedida.setText("---");
        }
    }//GEN-LAST:event_comboProductoItemStateChanged

    private void tablaCompraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCompraMouseClicked
        this.abrirPDF(evt);
    }//GEN-LAST:event_tablaCompraMouseClicked

    private void comboComprobanteBuscItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboComprobanteBuscItemStateChanged
        this.txtNrmComrpoBusc.setText("");
    }//GEN-LAST:event_comboComprobanteBuscItemStateChanged

    private void txtNroComprobanteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNroComprobanteKeyReleased
        if (this.txtNroComprobante.getText().trim().length() == 4) {
            if (evt.getKeyCode() != 8) {
                String serie = this.txtNroComprobante.getText().trim();
                this.txtNroComprobante.setText(serie + "-");
            }
        }
    }//GEN-LAST:event_txtNroComprobanteKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCargarDocumento;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEditarAdquirir;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JButton btnVerDocumento;
    private javax.swing.JComboBox<Comprobante> comboComprobante;
    private javax.swing.JComboBox<Comprobante> comboComprobanteBusc;
    private javax.swing.JComboBox<Producto> comboProducto;
    private javax.swing.JComboBox<Proveedor> comboProveedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tablaCompra;
    private javax.swing.JTable tablaCompraAdquirir;
    private javax.swing.JTextField txtCantidad;
    private com.toedter.calendar.JDateChooser txtFecha;
    private com.toedter.calendar.JDateChooser txtFechaCaduca;
    private javax.swing.JTextField txtNrmComrpoBusc;
    private javax.swing.JTextField txtNroComprobante;
    private javax.swing.JTextField txtPaogo;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JLabel txtUnidadMedida;
    // End of variables declaration//GEN-END:variables

    private void validar_llenado(java.awt.event.KeyEvent evt, int opc) {
        //opc: 1 es para ingresar solo números
        //opc: 2 es para ingresar solo letras
        char validar = evt.getKeyChar();
        if (opc == 1) {
            if (Character.isLetter(validar) && validar != KeyEvent.VK_SPACE
                    && validar != KeyEvent.VK_ENTER) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        }
        if (opc == 2) {
            if (Character.isDigit(validar) && validar != KeyEvent.VK_SPACE
                    && validar != KeyEvent.VK_ENTER) {
                getToolkit().beep(); //sonido de alerta
                evt.consume();
            }
        }
    }

    private void buscar() {
        String buscar = this.txtNrmComrpoBusc.getText().trim();
        if (this.comboComprobanteBusc.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Debe elegir que tipo de Comprobante va a buscar.", "BUSCAR --> COMPRA", JOptionPane.WARNING_MESSAGE);
        } else {
            this.obtenerComboxBusc();
            ArrayList<Compra> ltsCompra = new ArrayList();
            try {
                ltsCompra = CompraBo.buscarCompra(this.objCompBusc.getId(), buscar);
                MTC.setListado_Compra(ltsCompra);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
    }

    private void seleccionar_pdf() {
        JFileChooser j = new JFileChooser();
        j.setDialogTitle("SELECCIONE UN ARCHIVO PDF");
        FileNameExtensionFilter fi = new FileNameExtensionFilter("PDF Files", "pdf");
        j.setFileFilter(fi);
        int se = j.showOpenDialog(this);
        if (se == 0) {
            this.btnCargarDocumento.setText("DOCUMENTO CARGADO");
            this.ruta_archivo = j.getSelectedFile().getAbsolutePath();
        }
    }

    private void abrirDocumento() {
        if (this.documento != null) {
            InputStream ver = new ByteArrayInputStream(this.documento);
            this.verDocumento(ver);
            if (this.ruta_archivo != null) {
                try {
                    File ruta = new File(ruta_archivo);
                    InputStream ver2 = new FileInputStream(ruta);
                    this.verDocumento(ver2);
                } catch (Exception e) {
                }
            }
        } else {
            if (this.ruta_archivo != null) {
                try {
                    File ruta = new File(ruta_archivo);
                    InputStream ver = new FileInputStream(ruta);
                    this.verDocumento(ver);
                } catch (Exception e) {
                }
            } else {
                JOptionPane.showMessageDialog(this, "Usted aún no a seleccionado un archivo PDF.", "MENSAJE --> DOCUMENTO", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private double redondear(double num) {
        return Math.rint(num * 100) / 100;
    }

    private void verDocumento(InputStream ver) {
        try {
            int tamanoInput = ver.available();
            byte[] datosPDF = new byte[tamanoInput];
            ver.read(datosPDF, 0, tamanoInput);
            OutputStream out = new FileOutputStream("new.pdf");
            out.write(datosPDF);
            //abrir archivo
            out.close();
            ver.close();
            Desktop.getDesktop().open(new File("new.pdf"));
        } catch (IOException e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Error al Intentar Abrir el Archivo", "MENSAJE --> COMPRA", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarFecha() {
        Calendar cal = Calendar.getInstance();
        Timestamp fecha_hora = new Timestamp(cal.getTimeInMillis());
        String fechaSistema = String.valueOf(fecha_hora);
        try {
            java.util.Date fechaParseada = new SimpleDateFormat("dd/MM/yyyy").parse(this.convertDate(fechaSistema.substring(0, 10)));
            this.txtFecha.setDate(fechaParseada);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private String convertDateBD(String dateStr) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate date = LocalDate.parse(dateStr, formatter);
        return date.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
    }

    private String convertDate(String dateStr) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate date = LocalDate.parse(dateStr, formatter);
        return date.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
    }

    private void botonos() {
        this.btnCancelar.setOpaque(false);
        this.btnCancelar.setContentAreaFilled(false);
        this.btnCancelar.setBorderPainted(false);
        this.btnCancelar.setToolTipText("Cancelar");

        this.btnNuevo.setOpaque(false);
        this.btnNuevo.setContentAreaFilled(false);
        this.btnNuevo.setBorderPainted(false);
        this.btnNuevo.setToolTipText("Nuevo");

        this.btnGuardar.setOpaque(false);
        this.btnGuardar.setContentAreaFilled(false);
        this.btnGuardar.setBorderPainted(false);
        this.btnGuardar.setToolTipText("Guardar");

        this.btnLimpiar.setOpaque(false);
        this.btnLimpiar.setContentAreaFilled(false);
        this.btnLimpiar.setBorderPainted(false);
        this.btnLimpiar.setToolTipText("Limpiar");

        this.btnEditar.setOpaque(false);
        this.btnEditar.setContentAreaFilled(false);
        this.btnEditar.setBorderPainted(false);
        this.btnEditar.setToolTipText("Editar");

        this.btnEliminar.setOpaque(false);
        this.btnEliminar.setContentAreaFilled(false);
        this.btnEliminar.setBorderPainted(false);
        this.btnEliminar.setToolTipText("Eliminar");

        this.btnEditarAdquirir.setOpaque(false);
        this.btnEditarAdquirir.setContentAreaFilled(false);
        this.btnEditarAdquirir.setBorderPainted(false);
        this.btnEditarAdquirir.setToolTipText("Editar Producto");

        this.btnVerDocumento.setOpaque(false);
        this.btnVerDocumento.setContentAreaFilled(false);
        this.btnVerDocumento.setBorderPainted(false);
        this.btnVerDocumento.setToolTipText("Ver Documento");

        this.btnAgregar.setOpaque(false);
        this.btnAgregar.setContentAreaFilled(false);
        this.btnAgregar.setBorderPainted(false);
        this.btnAgregar.setToolTipText("Agregar Producto");

        this.btnQuitar.setOpaque(false);
        this.btnQuitar.setContentAreaFilled(false);
        this.btnQuitar.setBorderPainted(false);
        this.btnQuitar.setToolTipText("Quitar Producto");
    }

    private void activarControles(boolean estado) {
        this.txtFecha.setEnabled(estado);
        this.comboComprobante.setEnabled(estado);
        this.txtNroComprobante.setEnabled(estado);
        this.comboProveedor.setEnabled(estado);
        this.btnCargarDocumento.setEnabled(estado);
        this.btnVerDocumento.setEnabled(estado);
        this.comboProducto.setEnabled(estado);
        this.txtCantidad.setEnabled(estado);
        this.txtPrecio.setEnabled(estado);
        this.btnAgregar.setEnabled(estado);
        this.btnQuitar.setEnabled(estado);
        this.btnEditarAdquirir.setEnabled(estado);
        this.tablaCompraAdquirir.setEnabled(estado);
        this.btnGuardar.setEnabled(estado);
        this.btnLimpiar.setEnabled(estado);
        this.btnCancelar.setEnabled(estado);
        this.txtFechaCaduca.setEnabled(estado);

        this.btnNuevo.setEnabled(!estado);
        this.btnEditar.setEnabled(!estado);
        this.btnEliminar.setEnabled(!estado);
        this.comboComprobanteBusc.setEnabled(!estado);
        this.txtNrmComrpoBusc.setEnabled(!estado);
        this.tablaCompra.setEnabled(!estado);

        if (estado) {
            this.tablaCompra.setBackground(new java.awt.Color(255, 102, 102));
            this.tablaCompraAdquirir.setBackground(new java.awt.Color(255, 255, 255));
        } else {
            this.tablaCompra.setBackground(new java.awt.Color(255, 255, 255));
            this.tablaCompraAdquirir.setBackground(new java.awt.Color(255, 102, 102));
        }
    }

    private void obtenerCombox() {
        if (this.comboComprobante.getItemAt(this.comboComprobante.getSelectedIndex()) != null) {
            this.objComp = this.comboComprobante.getItemAt(this.comboComprobante.getSelectedIndex());
        }
        if (comboProveedor.getItemAt(comboProveedor.getSelectedIndex()) != null) {
            this.objP = comboProveedor.getItemAt(comboProveedor.getSelectedIndex());
        }
    }

    private void obtenerComboxBusc() {
        if (this.comboComprobanteBusc.getItemAt(this.comboComprobanteBusc.getSelectedIndex()) != null) {
            this.objCompBusc = this.comboComprobanteBusc.getItemAt(this.comboComprobanteBusc.getSelectedIndex());
        }
    }

    private void cargarTabla() {
        try {
            ArrayList<Compra> ltscompra = CompraBo.obtenerListaCompra();
            MTC.setListado_Compra(ltscompra);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void definirTamañoColumnaAdquirir() {
        TableColumnModel columnModel = this.tablaCompraAdquirir.getColumnModel();

        columnModel.getColumn(0).setPreferredWidth(80);
        columnModel.getColumn(1).setPreferredWidth(300);
        columnModel.getColumn(2).setPreferredWidth(80);
        columnModel.getColumn(3).setPreferredWidth(80);
        columnModel.getColumn(4).setPreferredWidth(100);

        this.tablaCompraAdquirir.getTableHeader().setFont(new Font("Tahoma", 1, 12));
        ((DefaultTableCellRenderer) this.tablaCompraAdquirir.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }

    private void definirTamañoColumna() {
        TableColumnModel columnModel = this.tablaCompra.getColumnModel();

        columnModel.getColumn(0).setPreferredWidth(80);
        columnModel.getColumn(1).setPreferredWidth(150);
        columnModel.getColumn(2).setPreferredWidth(150);
        columnModel.getColumn(3).setPreferredWidth(80);
        columnModel.getColumn(4).setPreferredWidth(250);
        columnModel.getColumn(5).setPreferredWidth(100);

        this.tablaCompra.getTableHeader().setFont(new Font("Tahoma", 1, 12));
        ((DefaultTableCellRenderer) this.tablaCompra.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
    }

    private void limpiar() {
        this.txtFecha.setCalendar(null);
        this.comboComprobante.setSelectedIndex(0);
        this.txtNroComprobante.setText("");
        this.txtPaogo.setText("");
        this.comboProveedor.setSelectedIndex(0);
        this.btnCargarDocumento.setText("CARGAR DOCUMENTO....");
        this.comboProducto.setSelectedIndex(0);
        this.txtPrecio.setText("");
        this.txtCantidad.setText("");
        this.txtFechaCaduca.setCalendar(null);
        this.txtUnidadMedida.setText("---");

        ruta_archivo = null;
        documento = null;
        objComp = null;
        objCompBusc = null;
        objP = null;
        objC = null;
        objProdc = null;
    }

    private void cargarTablaAdquirir() {
        detalleCompraTableModel = new DefaultTableModel();
        this.tablaCompraAdquirir.setModel(detalleCompraTableModel);
        String titu[] = {"ID", "DESCRIPCIÓN", "CANTIDAD", "PRECIO C/U", "CADUCIDAD"};
        detalleCompraTableModel.setColumnIdentifiers(titu);
        this.tablaCompraAdquirir.getColumnModel().getColumn(0).setPreferredWidth(30);
        this.tablaCompraAdquirir.getColumnModel().getColumn(1).setPreferredWidth(200);

        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        DefaultTableCellRenderer tcc = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.RIGHT);
        tcc.setHorizontalAlignment(SwingConstants.CENTER);
        this.tablaCompraAdquirir.getColumnModel().getColumn(2).setCellRenderer(tcr);
        this.tablaCompraAdquirir.getColumnModel().getColumn(3).setCellRenderer(tcr);
        this.tablaCompraAdquirir.getColumnModel().getColumn(4).setCellRenderer(tcr);
    }

    private void editar() {
        int fila = this.tablaCompra.getSelectedRow();
        if (fila != -1) {
            this.objC = MTC.getCompra(fila);
            this.activarControles(true);
            this.cargarTabla();
            this.cargarTablaAdquirir();
            this.cargarDatos(objC);
        } else {
            JOptionPane.showMessageDialog(this, "Usted no a seleccionado un campo en la tabla.", "MENSAJE --> COMPRA", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarDatos(Compra objC) {
        try {
            java.util.Date fechaParseada = new SimpleDateFormat("dd/MM/yyyy").parse(this.convertDate(objC.getFecha()));

            this.txtFecha.setDate(fechaParseada);
            this.comboComprobante.getModel().setSelectedItem(objC.getObjComp());
            this.txtNroComprobante.setText(objC.getNroComprobante());
            this.txtPaogo.setText(String.valueOf(objC.getPago()));
            this.comboProveedor.getModel().setSelectedItem(objC.getObjProvee());

            if (objC.getDocumentoPDF() != null) {
                this.btnCargarDocumento.setText("DOCUMENTO CARGADO");
                this.documento = objC.getDocumentoPDF();
                this.ruta_archivo = null;
            }

            this.cargarTablaDetalle(objC);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

        this.objComp = objC.getObjComp();
        this.objP = objC.getObjProvee();
    }

    private void cargarTablaDetalle(Compra objC) {
        try {
            ArrayList<DetCompra> ltsDetCompra = DetCompraBo.obtenerListaDetCompra(objC.getId());
            for (DetCompra DC : ltsDetCompra) {
                String rowData[] = new String[5];
                String codigo = String.valueOf(DC.getObjP().getId());
                String descripcion = DC.getObjP().getDescripcion();
                String cantidad = String.valueOf(DC.getCantidad());
                String precio = String.valueOf(DC.getPrecio());
                String caduca = "dd/MM/yyyy";
                if (DC.getObjP().getFecha_caduca() != null) {
                    caduca = DC.getObjP().getFecha_caduca();
                }

                rowData[0] = codigo;
                rowData[1] = descripcion;
                rowData[2] = cantidad;
                rowData[3] = precio;
                rowData[4] = caduca;
                detalleCompraTableModel.addRow(rowData);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void eliminar() {
        if (this.tablaCompra.getSelectedRow() != -1) {
            int fila = this.tablaCompra.getSelectedRow();
            Compra objCompra = MTC.getCompra(fila);
            int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro que desea eliminar la compra con el comprobante "
                    + objCompra.toString() + " ?", "ELIMINAR --> COMPRA", JOptionPane.YES_NO_OPTION);
            if (confirm == 0) {
                try {
                    if (CompraBo.eliminarCompra(objCompra)) {
                        this.cargarTabla();
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudo Eliminar", "MENSAJE --> COMPRA", JOptionPane.ERROR_MESSAGE);
                    }
                    //Editamos stock
                    ArrayList<DetCompra> ltsDetCompra = DetCompraBo.obtenerListaDetCompra(objCompra.getId());
                    for (DetCompra DC : ltsDetCompra) {
                        ProductoBo.actualizarProductoVenta(DC.getObjP(), DC.getCantidad());
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un elemento de la tabla.", "MENSAJE --> COMPRA", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void agregar() {
        if (comboProducto.getSelectedIndex() == 0 || this.txtCantidad.getText().trim().equals("")
                || this.txtPrecio.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Complete los campos correctamente", "AGREGAR --> PRODUCTO", JOptionPane.WARNING_MESSAGE);
        } else {
            this.obtenerProducto();
            String rowData[] = new String[5];
            String producto = "", caduca = "dd/MM/yyyy";
            int cantidad, codigo;
            double precio;

            if (this.buscarProducto(this.objProdc) == 0) {
                codigo = this.objProdc.getId();
                producto = this.objProdc.getDescripcion();
                cantidad = Integer.parseInt(this.txtCantidad.getText());
                precio = Double.parseDouble(this.txtPrecio.getText());
                if (!(((JTextField) this.txtFechaCaduca.getDateEditor().getUiComponent()).getText().trim().equals(""))) {
                    caduca = ((JTextField) this.txtFechaCaduca.getDateEditor().getUiComponent()).getText();
                }

                rowData[0] = String.valueOf(codigo);
                rowData[1] = producto;
                rowData[2] = String.valueOf(cantidad);
                rowData[3] = String.valueOf(precio);
                rowData[4] = caduca;
                detalleCompraTableModel.addRow(rowData);
                this.calculaTotal();
            } else {
                JOptionPane.showMessageDialog(this, "El producto ya se encuentra registrado.", "AGREGAR --> PRODUCTO", JOptionPane.INFORMATION_MESSAGE);
            }

            this.txtCantidad.setText("");
            this.txtPrecio.setText("");
            this.txtFechaCaduca.setDate(null);
            comboProducto.setSelectedIndex(0);
        }
    }

    private void obtenerProducto() {
        if (comboProducto.getItemAt(comboProducto.getSelectedIndex()) != null) {
            this.objProdc = comboProducto.getItemAt(comboProducto.getSelectedIndex());
        }
    }

    private int buscarProducto(Producto objProdc) {
        int estado = 0;
        for (int fila = 0; fila < this.tablaCompraAdquirir.getRowCount(); fila++) {
            if (this.tablaCompraAdquirir.getValueAt(fila, 0).toString().trim().equals(String.valueOf(objProdc.getId()))) {
                estado = 1;
                break;
            }
        }
        return estado;
    }

    private void calculaTotal() {
        double tot = 0;
        for (int i = 0; i < this.tablaCompraAdquirir.getRowCount(); i++) {
            tot = tot + (Integer.parseInt(detalleCompraTableModel.getValueAt(i, 2).toString())
                    * Double.parseDouble(detalleCompraTableModel.getValueAt(i, 3).toString()));
        }
        tot = this.redondear(tot);
        this.txtPaogo.setText(String.valueOf(tot));
    }

    private void editarCompra() {
        int fila;
        if (detalleCompraTableModel.getRowCount() > 0) {
            if (this.tablaCompraAdquirir.getSelectedRow() != -1) {
                this.obtenerProducto();
                fila = tablaCompraAdquirir.getSelectedRow();
                String codigo = this.tablaCompraAdquirir.getValueAt(fila, 0).toString(); //Obtenees el codigo del producto
                try {
                    this.objProdc = ProductoBo.buscarProductoId(Integer.parseInt(codigo));
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
                comboProducto.getModel().setSelectedItem(objProdc); //Seleccionamos el producto
                this.txtCantidad.setText(this.tablaCompraAdquirir.getValueAt(fila, 2).toString()); //Cargamos el JText Cantidad
                this.txtPrecio.setText(this.tablaCompraAdquirir.getValueAt(fila, 3).toString()); //Cargamos el JText Precio
                this.quitar();
            } else {
                JOptionPane.showMessageDialog(this, "No ha seleccionado un elemento de la tabla", "QUITAR PRODUCTO", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay ningún elemento en la tabla", "QUITAR PRODUCTO", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void quitar() {
        int fil;
        if (detalleCompraTableModel.getRowCount() > 0) {
            if (this.tablaCompraAdquirir.getSelectedRow() != -1) {
                fil = tablaCompraAdquirir.getSelectedRow();
                detalleCompraTableModel.removeRow(fil);
                this.calculaTotal();
            } else {
                JOptionPane.showMessageDialog(this, "No ha seleccionado un elemento de la tabla", "QUITAR --> PRODUCTO", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay ningún elemento en la tabla", "QUITAR PRODUCTO", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void guardar() {
        if (this.validar() == 0) {
            this.obtenerCombox();
            Compra objCompra = new Compra(0, Double.parseDouble(this.txtPaogo.getText().trim()),
                    this.convertDateBD(((JTextField) this.txtFecha.getDateEditor().getUiComponent()).getText()), 1,
                    this.txtNroComprobante.getText().trim(), null, this.objComp, this.objP, this.objPeronal);
            try {
                if (this.objC == null) {
                    //Registramos la Compra
                    if (CompraBo.grabarCompra(objCompra)) {
                        JOptionPane.showMessageDialog(this, "Se Registró Correctamente", "MENSAJE --> COMPRA", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudo Registrar", "MENSAJE --> COMPRA", JOptionPane.ERROR_MESSAGE);
                    }
                    int id = CompraBo.ultimoIdCompra();
                    if (this.ruta_archivo != null) {
                        CompraBo.grabarDocumento(obtenerRuta(), id);
                    }
                    //Registramos el Detalle de la Compra
                    objCompra.setId(id);
                    ArrayList<DetCompra> arrDet = this.obtenerDetallesOrden(objCompra); //Preparar los detalles de la Compra en ArrayList, obtenidos del JTable.
                    for (DetCompra DC : arrDet) {
                        //Agregar Stock y precio
                        ProductoBo.actualizarProductoCompra(DC.getObjP(), DC.getCantidad(), DC.getPrecio());
                        if (!(DC.getCaducidadProducto().equals("dd/MM/yyyy"))) {
                            ProductoBo.actualizarCaducidad(this.convertDateBD(DC.getCaducidadProducto()), DC.getObjP().getId());
                        }
                        //Guardamos detalle compra
                        DetCompraBo.grabarDetCompraBo(DC);
                    }

                    this.limpiar();
                    this.activarControles(false);
                    this.cargarTabla();
                    this.cargarTablaAdquirir();
                } else {
                    objCompra.setId(this.objC.getId());

                    if (CompraBo.modificarCompra(objCompra)) {
                        JOptionPane.showMessageDialog(this, "Se Modificó Correctamente", "MENSAJE --> COMPRA", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "No se pudo Modificar", "MENSAJE --> COMPRA", JOptionPane.ERROR_MESSAGE);
                    }
                    if (this.ruta_archivo != null) {
                        CompraBo.modificarDocumento(obtenerRuta(), objCompra.getId());
                    }
                    //Eliminamos los producto ya existentes
                    ArrayList<DetCompra> ltsDetCompra = DetCompraBo.obtenerListaDetCompra(objCompra.getId());
                    for (DetCompra DC : ltsDetCompra) {
                        ProductoBo.actualizarProductoVenta(DC.getObjP(), DC.getCantidad());
                    }
                    DetCompraBo.eliminarDetCompraBo(objCompra.getId());

                    //Registramos el Detalle de la Compra
                    ArrayList<DetCompra> arrDet = this.obtenerDetallesOrden(objCompra); //Preparar los detalles de la Compra en ArrayList, obtenidos del JTable.
                    for (DetCompra DC : arrDet) {
                        //Agregar Stock y precio
                        ProductoBo.actualizarProductoCompra(DC.getObjP(), DC.getCantidad(), DC.getPrecio());
                        if (!(DC.getCaducidadProducto().equals("dd/MM/yyyy"))) {
                            ProductoBo.actualizarCaducidad(this.convertDateBD(DC.getCaducidadProducto()), DC.getObjP().getId());
                        }
                        //Guardamos detalle compra
                        DetCompraBo.grabarDetCompraBo(DC);
                    }

                    this.limpiar();
                    this.activarControles(false);
                    this.cargarTabla();
                    this.cargarTablaAdquirir();
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Porfavor!!!\nVerifique que los campos esten correptamente ingresados", "MENSAJE --> LLENADO", JOptionPane.WARNING_MESSAGE);
        }
    }

    private int validar() {
        int correcto = 0;
        if (this.comboComprobante.getSelectedIndex() == 0
                || ((JTextField) this.txtFecha.getDateEditor().getUiComponent()).getText().trim().equals("")
                || this.txtNroComprobante.getText().trim().equals("") || this.txtPaogo.getText().trim().equals("")
                || this.comboProveedor.getSelectedIndex() == 0) {
            correcto = 1;
        }
        return correcto;
    }

    private byte[] obtenerRuta() {
        File ruta = new File(ruta_archivo);
        byte[] pdf;
        try {
            pdf = new byte[(int) ruta.length()];
            InputStream input = new FileInputStream(ruta);
            input.read(pdf);
        } catch (IOException ex) {
            pdf = null;
        }
        return pdf;
    }

    private ArrayList obtenerDetallesOrden(Compra objC) {
        ArrayList listDet = new ArrayList();
        for (int fila = 0; fila < this.tablaCompraAdquirir.getRowCount(); fila++) {
            DetCompra objDC = new DetCompra();
            //Obtenemos el producto
            Producto objProducto = new Producto();
            String codigo = this.tablaCompraAdquirir.getValueAt(fila, 0).toString(); //Obtenees el codigo del producto
            try {
                objProducto = ProductoBo.buscarProductoId(Integer.parseInt(codigo));
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            objDC.setCantidad(Integer.parseInt(detalleCompraTableModel.getValueAt(fila, 2).toString()));
            objDC.setPrecio(Double.parseDouble(detalleCompraTableModel.getValueAt(fila, 3).toString()));
            objDC.setCaducidadProducto(detalleCompraTableModel.getValueAt(fila, 4).toString());
            objDC.setObjC(objC);
            objDC.setObjP(objProducto);
            listDet.add(objDC);
        }
        return listDet;
    }

    private void cargarDatosCombo() {
        this.comboComprobante.removeAllItems();
        this.comboComprobanteBusc.removeAllItems();
        Comprobante objCom = new Comprobante();
        objCom.setNombre("--Seleccione--");
        this.comboComprobante.addItem(objCom);
        this.comboComprobanteBusc.addItem(objCom);

        this.comboProveedor.removeAllItems();
        Proveedor objProv = new Proveedor();
        objProv.setRazonSocial("--Seleccione--");
        this.comboProveedor.addItem(objProv);

        this.comboProducto.removeAllItems();
        Producto objProd = new Producto();
        objProd.setDescripcion("--Seleccione--");
        this.comboProducto.addItem(objProd);

        try {
            ComprobanteBo.obtenerListaComboTipComp(comboComprobante);
            ComprobanteBo.obtenerListaComboTipComp(comboComprobanteBusc);
            ProveedorBo.obtenerListaCombProveedor(comboProveedor);
            ProductoBo.llenarComboProducto(comboProducto);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void abrirPDF(MouseEvent evt) {
        int column = this.tablaCompra.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = this.tablaCompra.getSelectedRow(); //fila
        Compra objetoComp = new Compra();

        if (row < this.tablaCompra.getRowCount() && row >= 0 && column < this.tablaCompra.getColumnCount() && column >= 0) {
            objetoComp = MTC.getCompra(row);

            Object value = this.tablaCompra.getValueAt(row, column);
            if (value instanceof JButton) {
                ((JButton) value).doClick();
                JButton boton = (JButton) value;

                if (boton.getText().equals("VACÍO")) {
                    JOptionPane.showMessageDialog(this, "No existe un archivo regitrado en la Base de Datos.", "MENSAJE --> Documento", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    try {
                        InputStream bos = new ByteArrayInputStream(objetoComp.getDocumentoPDF());
                        int tamanoInput = bos.available();
                        byte[] datosPDF = new byte[tamanoInput];
                        bos.read(datosPDF, 0, tamanoInput);
                        OutputStream out = new FileOutputStream("new.pdf");
                        out.write(datosPDF);
                        //abrir archivo
                        out.close();
                        bos.close();
                        Desktop.getDesktop().open(new File("new.pdf"));
                    } catch (IOException ex) {
                        System.out.println(ex.getMessage());
                        JOptionPane.showMessageDialog(this, "Error al Intentar Abrir el Archivo", "MENSAJE --> DOCUMENTO", JOptionPane.ERROR_MESSAGE);
                    }
                }

            }
        }
    }
}
